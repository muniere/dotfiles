# =====
# Shell
# =====
function addpath() {
  # delete duplicated path
  local args="$@"
  local base=$PATH
  for x in $args; do
    base=${base//$x/}
    base=${base//::/:}
  done

  # add new path
  local ext="${args// /:}"

  export PATH="$ext:$base"
}

# LANG
export LC_ALL=C
export LANG=en_US.UTF-8

# PATH
addpath $HOME/.bin /usr/local/bin /usr/local/sbin /usr/bin /bin /usr/sbin /sbin

# Editor
export EDITOR=vim

function tstatus() {
  local addr=""
  local load=""

  if [ "`uname`" == "Linux" ]; then
    [ -z "${addr}" ] && addr=`ifconfig eth0 | awk '/inet addr/ { sub("inet addr:", "", $0); print $1 }'`
    [ -z "${addr}" ] && addr=`ifconfig eth1 | awk '/inet addr/ { sub("inet addr:", "", $0); print $1 }'`
    [ -z "${load}" ] && load=`uptime | sed 's/.*load average: \(.*\)/\1/g'`
  elif [ "`uname`" == "Darwin" ]; then
    [ -z "${addr}" ] && addr=`ifconfig en0 | awk '/inet / { sub("inet", "", $0); print $1 }'`
    [ -z "${addr}" ] && addr=`ifconfig en1 | awk '/inet / { sub("inet", "", $0); print $1 }'`
    [ -z "${load}" ] && load=`uptime | sed 's/.*load averages: \(.*\)/\1/g'`
  fi
  
  echo "\"`hostname`($addr)\" [$load] `date +'%Y/%m/%d %H:%M:%S'`"
}

# =====
# Python
# =====
export PYTHONDONTWRITEBYTECODE=1
export PIPENV_VENV_IN_PROJECT=true

# =====
# Git : Completion
# =====
if (which icdiff &> /dev/null); then
  function _git_icdiff ()
  {
    __git_has_doubledash && return

    case "$cur" in
    --diff-algorithm=*)
      __gitcomp "$__git_diff_algorithms" "" "${cur##--diff-algorithm=}"
      return
      ;;
    --*)
      __gitcomp "--cached --staged --pickaxe-all --pickaxe-regex
        --base --ours --theirs --no-index
        $__git_diff_common_options
        "
      return
      ;;
    esac
    __git_complete_revlist_file
  }
fi

# =====
# fzf : Functions
# =====
if (which fzf &> /dev/null); then
  export FZF_DEFAULT_OPTS='--height 50% --border --reverse --bind ctrl-k:kill-line --bind ctrl-j:execute::'

  function fzf-file () {
    local selected
    selected=$(find . -maxdepth 20 | grep -v '/\.' | tail -n +2 | fzf)
    if [ -n "$selected" ]; then
      BUFFER="${BUFFER}${selected}"
      CURSOR=$#BUFFER
    fi
    zle reset-prompt
  }

  function fzf-src() {
    local selected
    selected=$(ghq list --full-path | sed -e "s|${HOME}|~|" | fzf)
    if [ -n "$selected" ]; then
      BUFFER="${BUFFER}${selected}"
      CURSOR=$#BUFFER
    fi
    zle reset-prompt
  }

  function fzf-gitlog () {
    if [[ ! "$BUFFER" =~ "\s*(git|tig)" ]]; then
      return
    fi

    local selected
    selected=$(git log --oneline | fzf | awk '{ print $1 }')
    if [ -n "$selected" ]; then
      BUFFER="${BUFFER}${selected}"
      CURSOR=$#BUFFER
    fi
    zle reset-prompt
  }

  function fzf-branch () {
    if [[ ! "$BUFFER" =~ "\s*(git|tig)" ]]; then
      return
    fi

    local selected
    selected=$(git branch -vv | fzf | awk '$0 = substr($0, 3) { print $1 }')
    if [ -n "$selected" ]; then
      BUFFER="${BUFFER}${selected}"
      CURSOR=$#BUFFER
    fi
    zle reset-prompt
  }

  function fzf-history() {
    local tac
    if which tac &> /dev/null; then
      tac="tac"
    else
      tac="tail -r"
    fi
  
    local selected
    selected=$(history 1 | eval $tac | fzf  --query "$LBUFFER" | awk '{$1=""; print $0}' | xargs)
    if [ -n "$selected" ]; then
      BUFFER="${BUFFER}${selected}"
      CURSOR=$#BUFFER
    fi
    zle reset-prompt
  }
fi

# vim: ft=sh sw=2 ts=2 sts=2
