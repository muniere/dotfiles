" Vim configurations for all environments
" Reference: http://vim.wikia.com/wiki/Example_vimc

"""
" XDG
"""
set runtimepath^=$XDG_CONFIG_HOME/vim
set runtimepath+=$XDG_DATA_HOME/vim
set runtimepath+=$XDG_CONFIG_HOME/vim/after

set packpath^=$XDG_DATA_HOME/vim,$XDG_CONFIG_HOME/vim
set packpath+=$XDG_CONFIG_HOME/vim/after,$XDG_DATA_HOME/vim/after

let g:netrw_home = $XDG_DATA_HOME."/vim"
call mkdir($XDG_DATA_HOME."/vim/spell", 'p')
set viewdir=$XDG_DATA_HOME/vim/view | call mkdir(&viewdir, 'p')

set backupdir=$XDG_CACHE_HOME/vim/backup | call mkdir(&backupdir, 'p')
set directory=$XDG_CACHE_HOME/vim/swap   | call mkdir(&directory, 'p')
set undodir=$XDG_CACHE_HOME/vim/undo     | call mkdir(&undodir,   'p')

if !has('nvim') | set viminfofile=$XDG_CACHE_HOME/vim/viminfo | endif

"""
" Features
""

" Default charset is utf-8
set encoding=utf8

" Use 256 true colors
set t_Co=256

" Enable show other buffers without saving current buffer
set hidden

" Enable commandline completion
set wildmenu

" Show command at the bottom
set showcmd

" Hilight search result
set hlsearch

" Backup
set backupskip=/tmp/*,/private/tmp/*

" Do not show preview window when completion
set completeopt-=preview

" Ignore whitespace diff
set diffopt+=iwhite

" Ignore capital case and small case when text search
set ignorecase
set smartcase

" Enable backspace key
set backspace=indent,eol,start

" Enable autoindent
set autoindent

" Do not move to start of line when move to other line
set nostartofline

" Show ruler at the bottom
set ruler

" Always show staus line
set laststatus=2

" Confirm save or not if buffer has changed
set confirm

" Use visual bell instead of beap
set visualbell

" Disable visual bell
set t_vb=

" Enable mouse 
set mouse=a

" Set command line height
set cmdheight=1

" Show line number
set number

" Set timeout length of keycode
set notimeout ttimeout ttimeoutlen=200

" Turn off IME when switch to insert mode
set iminsert=0
set imsearch=0

" Set fold method to marker
set foldmethod=marker

" Enable modeline
set modeline
set modelines=5

" Use 4 spaces in place of tab
set shiftwidth=4
set softtabstop=4
set tabstop=4
set expandtab

" Set new window directions
set splitbelow
set splitright

" Shell script with bash mode
let g:is_bash=1

" Move to last edit position
autocmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal g`\"" | endif

" Do not continue comment line
autocmd Filetype * set formatoptions-=r
autocmd Filetype * set formatoptions-=o


"""
" Keymaps
"""

" Deactivate highlight
nnoremap <C-l> :nohl<CR><C-l>

" Move in visual line
nnoremap k gk
nnoremap j gj
nnoremap <Up> gk
nnoremap <Down> gj

" Tab utilization
nnoremap tt :tabnew<CR>
nnoremap td :tabclose<CR>
nnoremap tl :tabnext<CR>
nnoremap tn :tabnext<CR>
nnoremap th :tabprevious<CR>
nnoremap tp :tabprevious<CR>
nnoremap tm :tabmove

"""
" Plugins
"""
function! PlugLoaded(name)
  if !has_key(g:plugs, a:name)
    return 0
  endif

  " remove trailing slash to match with &rtp;
  " paths in &rtp don't contain trailing slash.
  let l:plug_path=substitute(g:plugs[a:name].dir, '/$', '', '')

  return isdirectory(l:plug_path) && stridx(&rtp, l:plug_path) >= 0
endfunction

call plug#begin($XDG_DATA_HOME.'/vim/plugged')
Plug 'vim-scripts/sudo.vim'
Plug 'vim-scripts/surround.vim'
Plug 'editorconfig/editorconfig-vim'

Plug 'itchyny/lightline.vim'
Plug 'lambdalisue/nerdfont.vim'

Plug 'lambdalisue/fern.vim'
Plug 'lambdalisue/fern-renderer-nerdfont.vim'

Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

Plug 'vim-denops/denops.vim'
Plug 'Shougo/ddc.vim'
Plug 'Shougo/ddc-around'
Plug 'Shougo/ddc-matcher_head'
Plug 'Shougo/ddc-sorter_rank'
Plug 'Shougo/ddc-ui-native'
call plug#end()

autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \| PlugInstall --sync | source $MYVIMRC
\| endif

" == lightline
let g:lightline = { 
  \ 'active'  : { 'left': [['mode'], ['relativepath'], ['modified']] },
  \ 'inactive': { 'left': [['mode'], ['relativepath'], ['modified']] }
  \ }

" == fern 
let g:fern#renderer = 'nerdfont'
let g:fern#default_hidden=1

nnoremap <silent> <C-e><C-e> :Fern . -drawer -toggle<CR>
inoremap <silent> <C-e><C-e> <ESC>:Fern . -drawer -toggle<CR>
nnoremap <silent> <C-e><C-f> :Fern . -drawer -toggle -reveal=%<CR>
inoremap <silent> <C-e><C-f> <ESC>:Fern . -drawer -toggle -reveal=%<CR>

function! s:FernInit() abort
  setlocal nonumber
  setlocal norelativenumber

  nmap <buffer> <Plug>(fern-action-open-or-enter) <Plug>(fern-action-open-or-expand)
endfunction

autocmd FileType fern call s:FernInit()

" == fzf
let g:fzf_preview_window = []

nnoremap <silent> <C-x><C-f> :Files<CR>
inoremap <silent> <C-x><C-f> <ESC>:Files<CR>
nnoremap <silent> <C-x><C-b> :Buffers<CR>
inoremap <silent> <C-x><C-b> <ESC>:Buffers<CR>

" == ddc
if PlugLoaded('ddc.vim')
  call ddc#custom#patch_global('ui', 'native')
  
  call ddc#custom#patch_global('sources', ['around'])
  
  call ddc#custom#patch_global('sourceOptions', {
        \ '_': {
        \   'matchers': ['matcher_head'],
        \   'sorters': ['sorter_rank']},
        \ })
  
  inoremap <silent><expr> <TAB>
        \ pumvisible() ? '<C-n>' :
        \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
        \ '<TAB>' : ddc#map#manual_complete()
  
  inoremap <expr><S-TAB>  pumvisible() ? '<C-p>' : '<C-h>'
  
  call ddc#enable()
endif

"""
" Appearance
"""
colorscheme muniere

" vim: ft=vim sw=2 ts=2 sts=2
